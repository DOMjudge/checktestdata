// Generated by Bisonc++ V4.01.00 on Sat, 17 Aug 2013 12:52:37 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "scanner.h"


#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;

    public:
        Parser(): d_scanner() {}
        Parser(std::istream& in, int startState = 0): d_scanner(in)
            { d_scanner.parserStart = startState; }
        int parse();

        // The final result of parsing:
        parse_t parseResult;

    private:
        int lex();                      // returns the next token from the
                                        // lexical scanner.
        void print();                   // use, e.g., d_token, d_loc

#if ( BISONCPP_VERSION >= 60000LL )
        void error();                   // called on (syntax) errors
        void exceptionHandler(std::exception const &exc);
#else
        void error(const char *msg);    // called on (syntax) errors
#if ( BISONCPP_VERSION >= 40200LL )
        void exceptionHandler__(std::exception const &exc);
#endif
#endif

    // support functions (the __ versions are used from version 6 and above)
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void executeAction__(int ruleNr);
        void errorRecovery__();
        void nextCycle__();
        void nextToken__();
        void print__();
};

#endif
