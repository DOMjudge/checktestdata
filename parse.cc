// Generated by Bisonc++ V6.04.01 on Tue, 26 Oct 2021 21:44:06 +0200

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {295, 1}, // 1: start ->  commands
     {295, 2}, // 2: start (PARSE_ASSIGNLIST) ->  PARSE_ASSIGNLIST assignlist
     {296, 0}, // 3: commands ->  <empty>
     {296, 2}, // 4: commands ->  commands command
     {298, 1}, // 5: command (CMD_SPACE) ->  CMD_SPACE
     {298, 1}, // 6: command (CMD_NEWLINE) ->  CMD_NEWLINE
     {298, 1}, // 7: command (CMD_EOF) ->  CMD_EOF
     {298, 1}, // 8: command (CMD_END) ->  CMD_END
     {298, 1}, // 9: command (CMD_ELSE) ->  CMD_ELSE
     {298, 6}, // 10: command (CMD_INT) ->  CMD_INT '(' expr ',' expr ')'
     {298, 8}, // 11: command (CMD_INT) ->  CMD_INT '(' expr ',' expr ',' variable ')'
     {298, 6}, // 12: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ')'
     {298, 8}, // 13: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ',' variable ')'
     {298, 10}, // 14: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ',' variable ',' opt_float ')'
     {298, 10}, // 15: command (CMD_FLOATP) ->  CMD_FLOATP '(' expr ',' expr ',' expr ',' expr ')'
     {298, 12}, // 16: command (CMD_FLOATP) ->  CMD_FLOATP '(' expr ',' expr ',' expr ',' expr ',' variable ')'
     {298, 14}, // 17: command (CMD_FLOATP) ->  CMD_FLOATP '(' expr ',' expr ',' expr ',' expr ',' variable ',' opt_float ')'
     {298, 4}, // 18: command (CMD_STRING) ->  CMD_STRING '(' value ')'
     {298, 4}, // 19: command (CMD_REGEX) ->  CMD_REGEX '(' value ')'
     {298, 6}, // 20: command (CMD_REGEX) ->  CMD_REGEX '(' value ',' variable ')'
     {298, 4}, // 21: command (CMD_ASSERT) ->  CMD_ASSERT '(' test ')'
     {298, 4}, // 22: command (CMD_SET) ->  CMD_SET '(' assignlist ')'
     {298, 4}, // 23: command (CMD_UNSET) ->  CMD_UNSET '(' varlist ')'
     {298, 4}, // 24: command (CMD_REP) ->  CMD_REP '(' expr ')'
     {298, 6}, // 25: command (CMD_REP) ->  CMD_REP '(' expr ',' command ')'
     {298, 4}, // 26: command (CMD_WHILE) ->  CMD_WHILE '(' test ')'
     {298, 6}, // 27: command (CMD_WHILE) ->  CMD_WHILE '(' test ',' command ')'
     {298, 4}, // 28: command (CMD_IF) ->  CMD_IF '(' test ')'
     {298, 6}, // 29: command (CMD_REPI) ->  CMD_REPI '(' variable ',' expr ')'
     {298, 8}, // 30: command (CMD_REPI) ->  CMD_REPI '(' variable ',' expr ',' command ')'
     {298, 6}, // 31: command (CMD_WHILEI) ->  CMD_WHILEI '(' variable ',' test ')'
     {298, 8}, // 32: command (CMD_WHILEI) ->  CMD_WHILEI '(' variable ',' test ',' command ')'
     {301, 1}, // 33: opt_float (OPT_FIXED) ->  OPT_FIXED
     {301, 1}, // 34: opt_float (OPT_SCIENTIFIC) ->  OPT_SCIENTIFIC
     {305, 1}, // 35: string (STRING) ->  STRING
     {302, 1}, // 36: value (INTEGER) ->  INTEGER
     {302, 1}, // 37: value (FLOAT) ->  FLOAT
     {302, 1}, // 38: value ->  string
     {302, 1}, // 39: value ->  variable
     {302, 1}, // 40: value ->  function
     {300, 1}, // 41: variable (VARNAME) ->  VARNAME
     {300, 4}, // 42: variable (VARNAME) ->  VARNAME '[' exprlist ']'
     {307, 1}, // 43: exprlist ->  expr
     {307, 3}, // 44: exprlist (',') ->  exprlist ',' expr
     {304, 1}, // 45: varlist (VARNAME) ->  VARNAME
     {304, 3}, // 46: varlist (',') ->  varlist ',' VARNAME
     {308, 3}, // 47: varassign ('=') ->  variable '=' expr
     {297, 1}, // 48: assignlist ->  varassign
     {297, 3}, // 49: assignlist (',') ->  assignlist ',' varassign
     {309, 1}, // 50: compare (CMP_LT) ->  CMP_LT
     {309, 1}, // 51: compare (CMP_GT) ->  CMP_GT
     {309, 1}, // 52: compare (CMP_LE) ->  CMP_LE
     {309, 1}, // 53: compare (CMP_GE) ->  CMP_GE
     {309, 1}, // 54: compare (CMP_EQ) ->  CMP_EQ
     {309, 1}, // 55: compare (CMP_NE) ->  CMP_NE
     {306, 4}, // 56: function (FUN_STRLEN) ->  FUN_STRLEN '(' value ')'
     {299, 1}, // 57: expr ->  term
     {299, 3}, // 58: expr ('+') ->  expr '+' term
     {299, 3}, // 59: expr ('-') ->  expr '-' term
     {310, 1}, // 60: term ->  fact
     {310, 3}, // 61: term ('*') ->  term '*' fact
     {310, 3}, // 62: term ('/') ->  term '/' fact
     {310, 3}, // 63: term ('%') ->  term '%' fact
     {311, 1}, // 64: fact ->  value
     {311, 2}, // 65: fact ('-') ->  '-' fact
     {311, 3}, // 66: fact ('(') ->  '(' expr ')'
     {311, 3}, // 67: fact ('^') ->  fact '^' fact
     {303, 2}, // 68: test ('!') ->  '!' test
     {303, 3}, // 69: test ('(') ->  '(' test ')'
     {303, 3}, // 70: test (LOGIC_AND) ->  test LOGIC_AND test
     {303, 3}, // 71: test (LOGIC_OR) ->  test LOGIC_OR test
     {303, 3}, // 72: test ->  expr compare expr
     {303, 1}, // 73: test (TEST_EOF) ->  TEST_EOF
     {303, 4}, // 74: test (TEST_MATCH) ->  TEST_MATCH '(' value ')'
     {303, 4}, // 75: test (TEST_UNIQUE) ->  TEST_UNIQUE '(' varlist ')'
     {303, 6}, // 76: test (TEST_INARRAY) ->  TEST_INARRAY '(' expr ',' variable ')'
     {312, 1}, // 77: start_$ ->  start
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { REQ_DEF}, {  4} },                    
    { {     295}, {  1} }, // start           
    { {     296}, {  2} }, // commands        
    { {     292}, {  3} }, // PARSE_ASSIGNLIST
    { {       0}, { -3} },                    
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {       2} }, 
    { {      EOF_}, { ACCEPT_} }, 
    { {         0}, {       0} }, 
};

SR_ s_2[] =
{
    { { REQ_DEF}, { 20} },               
    { {     298}, {  4} }, // command    
    { {     268}, {  5} }, // CMD_SPACE  
    { {     269}, {  6} }, // CMD_NEWLINE
    { {     270}, {  7} }, // CMD_EOF    
    { {     285}, {  8} }, // CMD_END    
    { {     284}, {  9} }, // CMD_ELSE   
    { {     271}, { 10} }, // CMD_INT    
    { {     272}, { 11} }, // CMD_FLOAT  
    { {     273}, { 12} }, // CMD_FLOATP 
    { {     274}, { 13} }, // CMD_STRING 
    { {     275}, { 14} }, // CMD_REGEX  
    { {     276}, { 15} }, // CMD_ASSERT 
    { {     277}, { 16} }, // CMD_SET    
    { {     278}, { 17} }, // CMD_UNSET  
    { {     279}, { 18} }, // CMD_REP    
    { {     280}, { 19} }, // CMD_WHILE  
    { {     283}, { 20} }, // CMD_IF     
    { {     281}, { 21} }, // CMD_REPI   
    { {     282}, { 22} }, // CMD_WHILEI 
    { {       0}, { -1} },               
};

SR_ s_3[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       297}, { 23} }, // assignlist
    { {       308}, { 24} }, // varassign 
    { {       300}, { 25} }, // variable  
    { {       286}, { 26} }, // VARNAME   
    { {         0}, {  0} },              
};

SR_ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR_ s_10[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 27} }, // '('
    { {         0}, {  0} },       
};

SR_ s_11[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 28} }, // '('
    { {         0}, {  0} },       
};

SR_ s_12[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 29} }, // '('
    { {         0}, {  0} },       
};

SR_ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 31} }, // '('
    { {         0}, {  0} },       
};

SR_ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 32} }, // '('
    { {         0}, {  0} },       
};

SR_ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 33} }, // '('
    { {         0}, {  0} },       
};

SR_ s_17[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 34} }, // '('
    { {         0}, {  0} },       
};

SR_ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 35} }, // '('
    { {         0}, {  0} },       
};

SR_ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 36} }, // '('
    { {         0}, {  0} },       
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 37} }, // '('
    { {         0}, {  0} },       
};

SR_ s_21[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 38} }, // '('
    { {         0}, {  0} },       
};

SR_ s_22[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 39} }, // '('
    { {         0}, {  0} },       
};

SR_ s_23[] =
{
    { { REQ_DEF}, {  2} },       
    { {      44}, { 40} }, // ','
    { {       0}, { -2} },       
};

SR_ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 41} }, // '='
    { {         0}, {  0} },       
};

SR_ s_26[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  42} }, // '['
    { {       0}, { -41} },       
};

SR_ s_27[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 43} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_28[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 56} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 57} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_30[] =
{
    { { REQ_TOKEN}, { 10} },              
    { {       302}, { 58} }, // value     
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_31[] =
{
    { { REQ_TOKEN}, { 10} },              
    { {       302}, { 59} }, // value     
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_32[] =
{
    { { REQ_TOKEN}, { 21} },                
    { {       303}, { 60} }, // test        
    { {        33}, { 61} }, // '!'         
    { {        40}, { 62} }, // '('         
    { {       299}, { 63} }, // expr        
    { {       257}, { 64} }, // TEST_EOF    
    { {       258}, { 65} }, // TEST_MATCH  
    { {       259}, { 66} }, // TEST_UNIQUE 
    { {       260}, { 67} }, // TEST_INARRAY
    { {       310}, { 44} }, // term        
    { {       311}, { 45} }, // fact        
    { {       302}, { 46} }, // value       
    { {        45}, { 47} }, // '-'         
    { {       287}, { 49} }, // INTEGER     
    { {       288}, { 50} }, // FLOAT       
    { {       305}, { 51} }, // string      
    { {       300}, { 52} }, // variable    
    { {       306}, { 53} }, // function    
    { {       289}, { 54} }, // STRING      
    { {       286}, { 26} }, // VARNAME     
    { {       267}, { 55} }, // FUN_STRLEN  
    { {         0}, {  0} },                
};

SR_ s_33[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       297}, { 68} }, // assignlist
    { {       308}, { 24} }, // varassign 
    { {       300}, { 25} }, // variable  
    { {       286}, { 26} }, // VARNAME   
    { {         0}, {  0} },              
};

SR_ s_34[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       304}, { 69} }, // varlist
    { {       286}, { 70} }, // VARNAME
    { {         0}, {  0} },           
};

SR_ s_35[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 71} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_36[] =
{
    { { REQ_TOKEN}, { 21} },                
    { {       303}, { 72} }, // test        
    { {        33}, { 61} }, // '!'         
    { {        40}, { 62} }, // '('         
    { {       299}, { 63} }, // expr        
    { {       257}, { 64} }, // TEST_EOF    
    { {       258}, { 65} }, // TEST_MATCH  
    { {       259}, { 66} }, // TEST_UNIQUE 
    { {       260}, { 67} }, // TEST_INARRAY
    { {       310}, { 44} }, // term        
    { {       311}, { 45} }, // fact        
    { {       302}, { 46} }, // value       
    { {        45}, { 47} }, // '-'         
    { {       287}, { 49} }, // INTEGER     
    { {       288}, { 50} }, // FLOAT       
    { {       305}, { 51} }, // string      
    { {       300}, { 52} }, // variable    
    { {       306}, { 53} }, // function    
    { {       289}, { 54} }, // STRING      
    { {       286}, { 26} }, // VARNAME     
    { {       267}, { 55} }, // FUN_STRLEN  
    { {         0}, {  0} },                
};

SR_ s_37[] =
{
    { { REQ_TOKEN}, { 21} },                
    { {       303}, { 73} }, // test        
    { {        33}, { 61} }, // '!'         
    { {        40}, { 62} }, // '('         
    { {       299}, { 63} }, // expr        
    { {       257}, { 64} }, // TEST_EOF    
    { {       258}, { 65} }, // TEST_MATCH  
    { {       259}, { 66} }, // TEST_UNIQUE 
    { {       260}, { 67} }, // TEST_INARRAY
    { {       310}, { 44} }, // term        
    { {       311}, { 45} }, // fact        
    { {       302}, { 46} }, // value       
    { {        45}, { 47} }, // '-'         
    { {       287}, { 49} }, // INTEGER     
    { {       288}, { 50} }, // FLOAT       
    { {       305}, { 51} }, // string      
    { {       300}, { 52} }, // variable    
    { {       306}, { 53} }, // function    
    { {       289}, { 54} }, // STRING      
    { {       286}, { 26} }, // VARNAME     
    { {       267}, { 55} }, // FUN_STRLEN  
    { {         0}, {  0} },                
};

SR_ s_38[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       300}, { 74} }, // variable
    { {       286}, { 26} }, // VARNAME 
    { {         0}, {  0} },            
};

SR_ s_39[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       300}, { 75} }, // variable
    { {       286}, { 26} }, // VARNAME 
    { {         0}, {  0} },            
};

SR_ s_40[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {       308}, { 76} }, // varassign
    { {       300}, { 25} }, // variable 
    { {       286}, { 26} }, // VARNAME  
    { {         0}, {  0} },             
};

SR_ s_41[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 77} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_42[] =
{
    { { REQ_TOKEN}, { 16} },              
    { {       307}, { 78} }, // exprlist  
    { {       299}, { 79} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_43[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        44}, { 80} }, // ','
    { {        43}, { 81} }, // '+'
    { {        45}, { 82} }, // '-'
    { {         0}, {  0} },       
};

SR_ s_44[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  83} }, // '*'
    { {      47}, {  84} }, // '/'
    { {      37}, {  85} }, // '%'
    { {       0}, { -57} },       
};

SR_ s_45[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  86} }, // '^'
    { {       0}, { -60} },       
};

SR_ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR_ s_47[] =
{
    { { REQ_TOKEN}, { 13} },              
    { {       311}, { 87} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_48[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       299}, { 88} }, // expr      
    { {       310}, { 44} }, // term      
    { {       311}, { 45} }, // fact      
    { {       302}, { 46} }, // value     
    { {        45}, { 47} }, // '-'       
    { {        40}, { 48} }, // '('       
    { {       287}, { 49} }, // INTEGER   
    { {       288}, { 50} }, // FLOAT     
    { {       305}, { 51} }, // string    
    { {       300}, { 52} }, // variable  
    { {       306}, { 53} }, // function  
    { {       289}, { 54} }, // STRING    
    { {       286}, { 26} }, // VARNAME   
    { {       267}, { 55} }, // FUN_STRLEN
    { {         0}, {  0} },              
};

SR_ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR_ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_55[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 89} }, // '('
    { {         0}, {  0} },       
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        44}, { 90} }, // ','
    { {        43}, { 81} }, // '+'
    { {        45}, { 82} }, // '-'
    { {         0}, {  0} },       
};

SR_ s_57[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        44}, { 91} }, // ','
    { {        43}, { 81} }, // '+'
    { {        45}, { 82} }, // '-'
    { {         0}, {  0} },       
};

SR_ s_58[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 92} }, // ')'
    { {         0}, {  0} },       
};

SR_ s_59[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 93} }, // ')'
    { {        44}, { 94} }, // ','
    { {         0}, {  0} },       
};

SR_ s_60[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {        41}, { 95} }, // ')'      
    { {       293}, { 96} }, // LOGIC_AND
    { {       294}, { 97} }, // LOGIC_OR 
    { {         0}, {  0} },             
};

SR_ s_61[] =
{
    { { REQ_TOKEN}, { 21} },                
    { {       303}, { 98} }, // test        
    { {        33}, { 61} }, // '!'         
    { {        40}, { 62} }, // '('         
    { {       299}, { 63} }, // expr        
    { {       257}, { 64} }, // TEST_EOF    
    { {       258}, { 65} }, // TEST_MATCH  
    { {       259}, { 66} }, // TEST_UNIQUE 
    { {       260}, { 67} }, // TEST_INARRAY
    { {       310}, { 44} }, // term        
    { {       311}, { 45} }, // fact        
    { {       302}, { 46} }, // value       
    { {        45}, { 47} }, // '-'         
    { {       287}, { 49} }, // INTEGER     
    { {       288}, { 50} }, // FLOAT       
    { {       305}, { 51} }, // string      
    { {       300}, { 52} }, // variable    
    { {       306}, { 53} }, // function    
    { {       289}, { 54} }, // STRING      
    { {       286}, { 26} }, // VARNAME     
    { {       267}, { 55} }, // FUN_STRLEN  
    { {         0}, {  0} },                
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {  21} },                
    { {       303}, {  99} }, // test        
    { {       299}, { 100} }, // expr        
    { {        33}, {  61} }, // '!'         
    { {        40}, {  62} }, // '('         
    { {       257}, {  64} }, // TEST_EOF    
    { {       258}, {  65} }, // TEST_MATCH  
    { {       259}, {  66} }, // TEST_UNIQUE 
    { {       260}, {  67} }, // TEST_INARRAY
    { {       310}, {  44} }, // term        
    { {       311}, {  45} }, // fact        
    { {       302}, {  46} }, // value       
    { {        45}, {  47} }, // '-'         
    { {       287}, {  49} }, // INTEGER     
    { {       288}, {  50} }, // FLOAT       
    { {       305}, {  51} }, // string      
    { {       300}, {  52} }, // variable    
    { {       306}, {  53} }, // function    
    { {       289}, {  54} }, // STRING      
    { {       286}, {  26} }, // VARNAME     
    { {       267}, {  55} }, // FUN_STRLEN  
    { {         0}, {   0} },                
};

SR_ s_63[] =
{
    { { REQ_TOKEN}, {  10} },           
    { {       309}, { 101} }, // compare
    { {        43}, {  81} }, // '+'    
    { {        45}, {  82} }, // '-'    
    { {       261}, { 102} }, // CMP_LT 
    { {       262}, { 103} }, // CMP_GT 
    { {       263}, { 104} }, // CMP_LE 
    { {       264}, { 105} }, // CMP_GE 
    { {       265}, { 106} }, // CMP_EQ 
    { {       266}, { 107} }, // CMP_NE 
    { {         0}, {   0} },           
};

SR_ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 108} }, // '('
    { {         0}, {   0} },       
};

SR_ s_66[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 109} }, // '('
    { {         0}, {   0} },       
};

SR_ s_67[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 110} }, // '('
    { {         0}, {   0} },       
};

SR_ s_68[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 111} }, // ')'
    { {        44}, {  40} }, // ','
    { {         0}, {   0} },       
};

SR_ s_69[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 112} }, // ')'
    { {        44}, { 113} }, // ','
    { {         0}, {   0} },       
};

SR_ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 114} }, // ')'
    { {        44}, { 115} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_72[] =
{
    { { REQ_TOKEN}, {   5} },             
    { {        41}, { 116} }, // ')'      
    { {        44}, { 117} }, // ','      
    { {       293}, {  96} }, // LOGIC_AND
    { {       294}, {  97} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR_ s_73[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {        41}, { 118} }, // ')'      
    { {       293}, {  96} }, // LOGIC_AND
    { {       294}, {  97} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR_ s_74[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 119} }, // ','
    { {         0}, {   0} },       
};

SR_ s_75[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 120} }, // ','
    { {         0}, {   0} },       
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_77[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  81} }, // '+'
    { {      45}, {  82} }, // '-'
    { {       0}, { -47} },       
};

SR_ s_78[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 121} }, // ']'
    { {        44}, { 122} }, // ','
    { {         0}, {   0} },       
};

SR_ s_79[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  81} }, // '+'
    { {      45}, {  82} }, // '-'
    { {       0}, { -43} },       
};

SR_ s_80[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 123} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_81[] =
{
    { { REQ_TOKEN}, {  14} },              
    { {       310}, { 124} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_82[] =
{
    { { REQ_TOKEN}, {  14} },              
    { {       310}, { 125} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_83[] =
{
    { { REQ_TOKEN}, {  13} },              
    { {       311}, { 126} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_84[] =
{
    { { REQ_TOKEN}, {  13} },              
    { {       311}, { 127} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_85[] =
{
    { { REQ_TOKEN}, {  13} },              
    { {       311}, { 128} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_86[] =
{
    { { REQ_TOKEN}, {  13} },              
    { {       311}, { 129} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_87[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  86} }, // '^'
    { {       0}, { -65} },       
};

SR_ s_88[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        41}, { 130} }, // ')'
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_89[] =
{
    { { REQ_TOKEN}, {  10} },              
    { {       302}, { 131} }, // value     
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_90[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 132} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_91[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 133} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_94[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       300}, { 134} }, // variable
    { {       286}, {  26} }, // VARNAME 
    { {         0}, {   0} },            
};

SR_ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR_ s_96[] =
{
    { { REQ_TOKEN}, {  21} },                
    { {       303}, { 135} }, // test        
    { {        33}, {  61} }, // '!'         
    { {        40}, {  62} }, // '('         
    { {       299}, {  63} }, // expr        
    { {       257}, {  64} }, // TEST_EOF    
    { {       258}, {  65} }, // TEST_MATCH  
    { {       259}, {  66} }, // TEST_UNIQUE 
    { {       260}, {  67} }, // TEST_INARRAY
    { {       310}, {  44} }, // term        
    { {       311}, {  45} }, // fact        
    { {       302}, {  46} }, // value       
    { {        45}, {  47} }, // '-'         
    { {       287}, {  49} }, // INTEGER     
    { {       288}, {  50} }, // FLOAT       
    { {       305}, {  51} }, // string      
    { {       300}, {  52} }, // variable    
    { {       306}, {  53} }, // function    
    { {       289}, {  54} }, // STRING      
    { {       286}, {  26} }, // VARNAME     
    { {       267}, {  55} }, // FUN_STRLEN  
    { {         0}, {   0} },                
};

SR_ s_97[] =
{
    { { REQ_TOKEN}, {  21} },                
    { {       303}, { 136} }, // test        
    { {        33}, {  61} }, // '!'         
    { {        40}, {  62} }, // '('         
    { {       299}, {  63} }, // expr        
    { {       257}, {  64} }, // TEST_EOF    
    { {       258}, {  65} }, // TEST_MATCH  
    { {       259}, {  66} }, // TEST_UNIQUE 
    { {       260}, {  67} }, // TEST_INARRAY
    { {       310}, {  44} }, // term        
    { {       311}, {  45} }, // fact        
    { {       302}, {  46} }, // value       
    { {        45}, {  47} }, // '-'         
    { {       287}, {  49} }, // INTEGER     
    { {       288}, {  50} }, // FLOAT       
    { {       305}, {  51} }, // string      
    { {       300}, {  52} }, // variable    
    { {       306}, {  53} }, // function    
    { {       289}, {  54} }, // STRING      
    { {       286}, {  26} }, // VARNAME     
    { {       267}, {  55} }, // FUN_STRLEN  
    { {         0}, {   0} },                
};

SR_ s_98[] =
{
    { { REQ_DEF}, {   3} },             
    { {     293}, {  96} }, // LOGIC_AND
    { {     294}, {  97} }, // LOGIC_OR 
    { {       0}, { -68} },             
};

SR_ s_99[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {        41}, { 137} }, // ')'      
    { {       293}, {  96} }, // LOGIC_AND
    { {       294}, {  97} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {  11} },           
    { {        41}, { 130} }, // ')'    
    { {       309}, { 101} }, // compare
    { {        43}, {  81} }, // '+'    
    { {        45}, {  82} }, // '-'    
    { {       261}, { 102} }, // CMP_LT 
    { {       262}, { 103} }, // CMP_GT 
    { {       263}, { 104} }, // CMP_LE 
    { {       264}, { 105} }, // CMP_GE 
    { {       265}, { 106} }, // CMP_EQ 
    { {       266}, { 107} }, // CMP_NE 
    { {         0}, {   0} },           
};

SR_ s_101[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 138} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR_ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR_ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR_ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR_ s_108[] =
{
    { { REQ_TOKEN}, {  10} },              
    { {       302}, { 139} }, // value     
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_109[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       304}, { 140} }, // varlist
    { {       286}, {  70} }, // VARNAME
    { {         0}, {   0} },           
};

SR_ s_110[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 141} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_113[] =
{
    { { REQ_TOKEN}, {   2} },           
    { {       286}, { 142} }, // VARNAME
    { {         0}, {   0} },           
};

SR_ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_115[] =
{
    { { REQ_TOKEN}, {  20} },               
    { {       298}, { 143} }, // command    
    { {       268}, {   5} }, // CMD_SPACE  
    { {       269}, {   6} }, // CMD_NEWLINE
    { {       270}, {   7} }, // CMD_EOF    
    { {       285}, {   8} }, // CMD_END    
    { {       284}, {   9} }, // CMD_ELSE   
    { {       271}, {  10} }, // CMD_INT    
    { {       272}, {  11} }, // CMD_FLOAT  
    { {       273}, {  12} }, // CMD_FLOATP 
    { {       274}, {  13} }, // CMD_STRING 
    { {       275}, {  14} }, // CMD_REGEX  
    { {       276}, {  15} }, // CMD_ASSERT 
    { {       277}, {  16} }, // CMD_SET    
    { {       278}, {  17} }, // CMD_UNSET  
    { {       279}, {  18} }, // CMD_REP    
    { {       280}, {  19} }, // CMD_WHILE  
    { {       283}, {  20} }, // CMD_IF     
    { {       281}, {  21} }, // CMD_REPI   
    { {       282}, {  22} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR_ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_117[] =
{
    { { REQ_TOKEN}, {  20} },               
    { {       298}, { 144} }, // command    
    { {       268}, {   5} }, // CMD_SPACE  
    { {       269}, {   6} }, // CMD_NEWLINE
    { {       270}, {   7} }, // CMD_EOF    
    { {       285}, {   8} }, // CMD_END    
    { {       284}, {   9} }, // CMD_ELSE   
    { {       271}, {  10} }, // CMD_INT    
    { {       272}, {  11} }, // CMD_FLOAT  
    { {       273}, {  12} }, // CMD_FLOATP 
    { {       274}, {  13} }, // CMD_STRING 
    { {       275}, {  14} }, // CMD_REGEX  
    { {       276}, {  15} }, // CMD_ASSERT 
    { {       277}, {  16} }, // CMD_SET    
    { {       278}, {  17} }, // CMD_UNSET  
    { {       279}, {  18} }, // CMD_REP    
    { {       280}, {  19} }, // CMD_WHILE  
    { {       283}, {  20} }, // CMD_IF     
    { {       281}, {  21} }, // CMD_REPI   
    { {       282}, {  22} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR_ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_119[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 145} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_120[] =
{
    { { REQ_TOKEN}, {  21} },                
    { {       303}, { 146} }, // test        
    { {        33}, {  61} }, // '!'         
    { {        40}, {  62} }, // '('         
    { {       299}, {  63} }, // expr        
    { {       257}, {  64} }, // TEST_EOF    
    { {       258}, {  65} }, // TEST_MATCH  
    { {       259}, {  66} }, // TEST_UNIQUE 
    { {       260}, {  67} }, // TEST_INARRAY
    { {       310}, {  44} }, // term        
    { {       311}, {  45} }, // fact        
    { {       302}, {  46} }, // value       
    { {        45}, {  47} }, // '-'         
    { {       287}, {  49} }, // INTEGER     
    { {       288}, {  50} }, // FLOAT       
    { {       305}, {  51} }, // string      
    { {       300}, {  52} }, // variable    
    { {       306}, {  53} }, // function    
    { {       289}, {  54} }, // STRING      
    { {       286}, {  26} }, // VARNAME     
    { {       267}, {  55} }, // FUN_STRLEN  
    { {         0}, {   0} },                
};

SR_ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_122[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 147} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_123[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 148} }, // ')'
    { {        44}, { 149} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_124[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  83} }, // '*'
    { {      47}, {  84} }, // '/'
    { {      37}, {  85} }, // '%'
    { {       0}, { -58} },       
};

SR_ s_125[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  83} }, // '*'
    { {      47}, {  84} }, // '/'
    { {      37}, {  85} }, // '%'
    { {       0}, { -59} },       
};

SR_ s_126[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  86} }, // '^'
    { {       0}, { -61} },       
};

SR_ s_127[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  86} }, // '^'
    { {       0}, { -62} },       
};

SR_ s_128[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  86} }, // '^'
    { {       0}, { -63} },       
};

SR_ s_129[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -67} }, 
};

SR_ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR_ s_131[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 150} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_132[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 151} }, // ')'
    { {        44}, { 152} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_133[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        44}, { 153} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_134[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 154} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_135[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -70} }, 
};

SR_ s_136[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -71} }, 
};

SR_ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR_ s_138[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  81} }, // '+'
    { {      45}, {  82} }, // '-'
    { {       0}, { -72} },       
};

SR_ s_139[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 155} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_140[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 156} }, // ')'
    { {        44}, { 113} }, // ','
    { {         0}, {   0} },       
};

SR_ s_141[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        44}, { 157} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR_ s_143[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 158} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_144[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 159} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_145[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 160} }, // ')'
    { {        44}, { 161} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_146[] =
{
    { { REQ_TOKEN}, {   5} },             
    { {        41}, { 162} }, // ')'      
    { {        44}, { 163} }, // ','      
    { {       293}, {  96} }, // LOGIC_AND
    { {       294}, {  97} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR_ s_147[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  81} }, // '+'
    { {      45}, {  82} }, // '-'
    { {       0}, { -44} },       
};

SR_ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_149[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       300}, { 164} }, // variable
    { {       286}, {  26} }, // VARNAME 
    { {         0}, {   0} },            
};

SR_ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR_ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_152[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       300}, { 165} }, // variable
    { {       286}, {  26} }, // VARNAME 
    { {         0}, {   0} },            
};

SR_ s_153[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 166} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR_ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR_ s_157[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       300}, { 167} }, // variable
    { {       286}, {  26} }, // VARNAME 
    { {         0}, {   0} },            
};

SR_ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_160[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_161[] =
{
    { { REQ_TOKEN}, {  20} },               
    { {       298}, { 168} }, // command    
    { {       268}, {   5} }, // CMD_SPACE  
    { {       269}, {   6} }, // CMD_NEWLINE
    { {       270}, {   7} }, // CMD_EOF    
    { {       285}, {   8} }, // CMD_END    
    { {       284}, {   9} }, // CMD_ELSE   
    { {       271}, {  10} }, // CMD_INT    
    { {       272}, {  11} }, // CMD_FLOAT  
    { {       273}, {  12} }, // CMD_FLOATP 
    { {       274}, {  13} }, // CMD_STRING 
    { {       275}, {  14} }, // CMD_REGEX  
    { {       276}, {  15} }, // CMD_ASSERT 
    { {       277}, {  16} }, // CMD_SET    
    { {       278}, {  17} }, // CMD_UNSET  
    { {       279}, {  18} }, // CMD_REP    
    { {       280}, {  19} }, // CMD_WHILE  
    { {       283}, {  20} }, // CMD_IF     
    { {       281}, {  21} }, // CMD_REPI   
    { {       282}, {  22} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR_ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_163[] =
{
    { { REQ_TOKEN}, {  20} },               
    { {       298}, { 169} }, // command    
    { {       268}, {   5} }, // CMD_SPACE  
    { {       269}, {   6} }, // CMD_NEWLINE
    { {       270}, {   7} }, // CMD_EOF    
    { {       285}, {   8} }, // CMD_END    
    { {       284}, {   9} }, // CMD_ELSE   
    { {       271}, {  10} }, // CMD_INT    
    { {       272}, {  11} }, // CMD_FLOAT  
    { {       273}, {  12} }, // CMD_FLOATP 
    { {       274}, {  13} }, // CMD_STRING 
    { {       275}, {  14} }, // CMD_REGEX  
    { {       276}, {  15} }, // CMD_ASSERT 
    { {       277}, {  16} }, // CMD_SET    
    { {       278}, {  17} }, // CMD_UNSET  
    { {       279}, {  18} }, // CMD_REP    
    { {       280}, {  19} }, // CMD_WHILE  
    { {       283}, {  20} }, // CMD_IF     
    { {       281}, {  21} }, // CMD_REPI   
    { {       282}, {  22} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR_ s_164[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 170} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_165[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 171} }, // ')'
    { {        44}, { 172} }, // ','
    { {         0}, {   0} },       
};

SR_ s_166[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        44}, { 173} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_167[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 174} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_168[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 175} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_169[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 176} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_170[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_171[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_172[] =
{
    { { REQ_TOKEN}, {   4} },                  
    { {       301}, { 177} }, // opt_float     
    { {       290}, { 178} }, // OPT_FIXED     
    { {       291}, { 179} }, // OPT_SCIENTIFIC
    { {         0}, {   0} },                  
};

SR_ s_173[] =
{
    { { REQ_TOKEN}, {  15} },              
    { {       299}, { 180} }, // expr      
    { {       310}, {  44} }, // term      
    { {       311}, {  45} }, // fact      
    { {       302}, {  46} }, // value     
    { {        45}, {  47} }, // '-'       
    { {        40}, {  48} }, // '('       
    { {       287}, {  49} }, // INTEGER   
    { {       288}, {  50} }, // FLOAT     
    { {       305}, {  51} }, // string    
    { {       300}, {  52} }, // variable  
    { {       306}, {  53} }, // function  
    { {       289}, {  54} }, // STRING    
    { {       286}, {  26} }, // VARNAME   
    { {       267}, {  55} }, // FUN_STRLEN
    { {         0}, {   0} },              
};

SR_ s_174[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR_ s_175[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_176[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR_ s_177[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 181} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_178[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR_ s_179[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_180[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 182} }, // ')'
    { {        44}, { 183} }, // ','
    { {        43}, {  81} }, // '+'
    { {        45}, {  82} }, // '-'
    { {         0}, {   0} },       
};

SR_ s_181[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_182[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_183[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       300}, { 184} }, // variable
    { {       286}, {  26} }, // VARNAME 
    { {         0}, {   0} },            
};

SR_ s_184[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 185} }, // ')'
    { {        44}, { 186} }, // ','
    { {         0}, {   0} },       
};

SR_ s_185[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_186[] =
{
    { { REQ_TOKEN}, {   4} },                  
    { {       301}, { 187} }, // opt_float     
    { {       290}, { 178} }, // OPT_FIXED     
    { {       291}, { 179} }, // OPT_SCIENTIFIC
    { {         0}, {   0} },                  
};

SR_ s_187[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 188} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_188[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    // $insert LTYPEclear
    d_locationStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

    // $insert LTYPEpop
    d_lsp = &d_locationStack[d_stackIdx];
}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
        // $insert LTYPEresize
        d_locationStack.resize(newSize);
    }

    ++d_stackIdx;
    // $insert LTYPEpush
    *(d_lsp = &d_locationStack[d_stackIdx]) = d_loc_;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 32 "checktestdata.y"
        { parseResult = vs_(0); }
        break;

        case 2:
#line 33 "checktestdata.y"
        { parseResult = vs_(0); }
        break;

        case 3:
#line 37 "checktestdata.y"
        { d_val_ = parse_t('l'); }
        break;

        case 4:
#line 38 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(-1),vs_(0)); }
        break;

        case 5:
#line 43 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 6:
#line 44 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 7:
#line 45 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 8:
#line 46 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 9:
#line 47 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 10:
#line 47 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 11:
#line 48 "checktestdata.y"
        { d_val_ = parse_t(vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 12:
#line 49 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 13:
#line 50 "checktestdata.y"
        { d_val_ = parse_t(vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 14:
#line 52 "checktestdata.y"
        { d_val_ = parse_t(vs_(-9),vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 15:
#line 54 "checktestdata.y"
        { d_val_ = parse_t(vs_(-9),vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 16:
#line 56 "checktestdata.y"
        { d_val_ = parse_t(vs_(-11),vs_(-9),vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 17:
#line 58 "checktestdata.y"
        { d_val_ = parse_t(vs_(-13),vs_(-11),vs_(-9),vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 18:
#line 59 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 19:
#line 60 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 20:
#line 61 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 21:
#line 62 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 22:
#line 63 "checktestdata.y"
        { d_val_ = parse_t('@',vs_(-3),vs_(-1)); }
        break;

        case 23:
#line 64 "checktestdata.y"
        { d_val_ = parse_t('@',vs_(-3),vs_(-1)); }
        break;

        case 24:
#line 65 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 25:
#line 66 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 26:
#line 67 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 27:
#line 68 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 28:
#line 69 "checktestdata.y"
        { d_val_ = parse_t(vs_(-3),vs_(-1)); }
        break;

        case 29:
#line 70 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 30:
#line 71 "checktestdata.y"
        { d_val_ = parse_t(vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 31:
#line 72 "checktestdata.y"
        { d_val_ = parse_t(vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 32:
#line 73 "checktestdata.y"
        { d_val_ = parse_t(vs_(-7),vs_(-5),vs_(-3),vs_(-1)); }
        break;

        case 33:
#line 76 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 34:
#line 76 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 35:
#line 79 "checktestdata.y"
        { d_val_ = parse_t('S',vs_(0)); }
        break;

        case 36:
#line 83 "checktestdata.y"
        { d_val_ = parse_t('I',vs_(0)); }
        break;

        case 37:
#line 84 "checktestdata.y"
        { d_val_ = parse_t('F',vs_(0)); }
        break;

        case 38:
#line 86 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 39:
#line 87 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 40:
#line 88 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 41:
#line 91 "checktestdata.y"
        { d_val_ = parse_t('v',vs_(0)); }
        break;

        case 42:
#line 92 "checktestdata.y"
        { d_val_ = parse_t('v',vs_(-3),vs_(-1)); }
        break;

        case 43:
#line 96 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(0)); }
        break;

        case 44:
#line 97 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(-2),vs_(0)); }
        break;

        case 45:
#line 101 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(0)); }
        break;

        case 46:
#line 102 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(-2),vs_(0)); }
        break;

        case 47:
#line 106 "checktestdata.y"
        { d_val_ = parse_t('a',vs_(-2),vs_(0)); }
        break;

        case 48:
#line 110 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(0)); }
        break;

        case 49:
#line 111 "checktestdata.y"
        { d_val_ = parse_t('l',vs_(-2),vs_(0)); }
        break;

        case 50:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 51:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 52:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 53:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 54:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 55:
#line 114 "checktestdata.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 56:
#line 117 "checktestdata.y"
        { d_val_ = parse_t('f',vs_(-3),vs_(-1)); }
        break;

        case 57:
#line 121 "checktestdata.y"
        { d_val_ = parse_t(vs_(0)); }
        break;

        case 58:
#line 122 "checktestdata.y"
        { d_val_ = parse_t('+',vs_(-2),vs_(0)); }
        break;

        case 59:
#line 123 "checktestdata.y"
        { d_val_ = parse_t('-',vs_(-2),vs_(0)); }
        break;

        case 60:
#line 127 "checktestdata.y"
        { d_val_ = parse_t(vs_(0)); }
        break;

        case 61:
#line 128 "checktestdata.y"
        { d_val_ = parse_t('*',vs_(-2),vs_(0)); }
        break;

        case 62:
#line 129 "checktestdata.y"
        { d_val_ = parse_t('/',vs_(-2),vs_(0)); }
        break;

        case 63:
#line 130 "checktestdata.y"
        { d_val_ = parse_t('%',vs_(-2),vs_(0)); }
        break;

        case 64:
#line 134 "checktestdata.y"
        { d_val_ = parse_t(vs_(0)); }
        break;

        case 65:
#line 135 "checktestdata.y"
        { d_val_ = parse_t('n',vs_(0)); }
        break;

        case 66:
#line 136 "checktestdata.y"
        { d_val_ = parse_t(vs_(-1)); }
        break;

        case 67:
#line 137 "checktestdata.y"
        { d_val_ = parse_t('^',vs_(-2),vs_(0)); }
        break;

        case 68:
#line 141 "checktestdata.y"
        { d_val_ = parse_t('!',vs_(0)); }
        break;

        case 69:
#line 142 "checktestdata.y"
        { d_val_ = parse_t(vs_(-1)); }
        break;

        case 70:
#line 143 "checktestdata.y"
        { d_val_ = parse_t('&',vs_(-2),vs_(0)); }
        break;

        case 71:
#line 144 "checktestdata.y"
        { d_val_ = parse_t('|',vs_(-2),vs_(0)); }
        break;

        case 72:
#line 145 "checktestdata.y"
        { d_val_ = parse_t('?',vs_(-1),vs_(-2),vs_(0)); }
        break;

        case 73:
#line 146 "checktestdata.y"
        { d_val_ = parse_t('E'); }
        break;

        case 74:
#line 147 "checktestdata.y"
        { d_val_ = parse_t('M',vs_(-1)); }
        break;

        case 75:
#line 148 "checktestdata.y"
        { d_val_ = parse_t('U',vs_(-1)); }
        break;

        case 76:
#line 149 "checktestdata.y"
        { d_val_ = parse_t('A',vs_(-3),vs_(-1)); }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


